/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Transactions {
  export type TransferStructStruct = {
    sender: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    message: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    account: PromiseOrValue<string>;
    keyword: PromiseOrValue<string>;
  };

  export type TransferStructStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string
  ] & {
    sender: string;
    receiver: string;
    amount: BigNumber;
    message: string;
    timestamp: BigNumber;
    account: string;
    keyword: string;
  };
}

export interface TransactionsInterface extends utils.Interface {
  functions: {
    "getAllTransactions()": FunctionFragment;
    "getTransactionCount()": FunctionFragment;
    "transfer(address,uint256,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllTransactions"
      | "getTransactionCount"
      | "transfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;

  events: {
    "Transfer(address,address,uint256,string,uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface TransferEventObject {
  from: string;
  receiver: string;
  amount: BigNumber;
  message: string;
  timestamp: BigNumber;
  account: string;
  keyword: string;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, string, string],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Transactions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TransactionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<[Transactions.TransferStructStructOutput[]]>;

    getTransactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      keyword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllTransactions(
    overrides?: CallOverrides
  ): Promise<Transactions.TransferStructStructOutput[]>;

  getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    message: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    keyword: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<Transactions.TransferStructStructOutput[]>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      keyword: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Transfer(address,address,uint256,string,uint256,string,string)"(
      from?: null,
      receiver?: null,
      amount?: null,
      message?: null,
      timestamp?: null,
      account?: null,
      keyword?: null
    ): TransferEventFilter;
    Transfer(
      from?: null,
      receiver?: null,
      amount?: null,
      message?: null,
      timestamp?: null,
      account?: null,
      keyword?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    getAllTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      keyword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      message: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      keyword: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
